package com.symphony.ds.malware;

import com.symphony.bdk.core.auth.AuthSession;
import com.symphony.bdk.core.client.ApiClientFactory;
import com.symphony.bdk.extension.BdkExtensionService;
import com.symphony.bdk.http.api.ApiClient;
import com.symphony.bdk.http.api.ApiException;
import com.symphony.bdk.http.api.Pair;
import com.symphony.bdk.http.api.util.TypeReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MalwareService implements BdkExtensionService {
    private final ApiClient apiClient;
    private final String json = "application/json";
    private final Map<String, String> headers;

    public MalwareService(
        ApiClientFactory apiClientFactory, AuthSession authSession
    ) {
        this.apiClient = apiClientFactory.getPodClient("/maestro/api");
        this.headers = new HashMap<>();
        this.headers.put("sessionToken", authSession.getSessionToken());
    }

    public State getState(String fileId) throws ApiException {
        String path = "/v1/attachments/malware-scan/state";
        List<Pair> queryParams = new ArrayList<>();
        queryParams.add(new Pair("fileId", fileId));

        return apiClient.invokeAPI(path, "GET", queryParams,
            null, headers, new HashMap<>(), new HashMap<>(), json, json,
            new String[] {}, new TypeReference<State>() {}).getData();
    }

    public void updateState(String fileId, State state) throws ApiException {
        String path = "/v1/attachments/malware-scan/state";
        List<Pair> queryParams = new ArrayList<>();
        queryParams.add(new Pair("fileId", fileId));

        apiClient.invokeAPI(path, "PUT", queryParams,
            state, headers, new HashMap<>(), new HashMap<>(), json, json,
            new String[] {}, null).getData();
    }
}
